name: 🔥 Firebase Security Rules Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'firestore.rules'
      - 'storage.rules'
      - 'tests/**'
      - '.github/workflows/firebase-rules-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'firestore.rules'
      - 'storage.rules'
      - 'tests/**'
      - '.github/workflows/firebase-rules-tests.yml'

env:
  NODE_VERSION: '18'
  FIREBASE_CLI_VERSION: 'latest'

jobs:
  rules-tests:
    name: 🧪 Test Firebase Security Rules
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'tests/package-lock.json'
          
      - name: 🔥 Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
        
      - name: 📋 Install test dependencies
        working-directory: ./tests
        run: npm ci
        
      - name: 🔍 Validate Firebase rules syntax
        run: |
          echo "Validating Firestore rules..."
          firebase firestore:rules:validate firestore.rules --project=fusion-fc-test
          
          echo "Validating Storage rules..."
          firebase storage:rules:validate storage.rules --project=fusion-fc-test
          
      - name: 🧪 Run Firestore rules tests
        working-directory: ./tests
        run: |
          echo "Starting Firestore rules tests..."
          timeout 300 node run-all-tests.js firestore-rules.test.js || exit 1
          
      - name: 🗄️ Run Storage rules tests  
        working-directory: ./tests
        run: |
          echo "Starting Storage rules tests..."
          timeout 300 node run-all-tests.js storage-rules.test.js || exit 1
          
      - name: 📊 Run all tests with coverage
        working-directory: ./tests
        run: |
          echo "Running complete test suite with coverage..."
          timeout 300 node run-all-tests.js --coverage || exit 1
          
      - name: 📈 Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          directory: ./tests/coverage
          flags: firebase-rules
          name: firebase-rules-coverage
          fail_ci_if_error: false
          
      - name: 💾 Cache Firebase emulator data
        uses: actions/cache@v3
        with:
          path: tests/test-data
          key: ${{ runner.os }}-firebase-emulator-${{ hashFiles('firestore.rules', 'storage.rules') }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulator-
            
      - name: 📄 Generate test report
        if: always()
        working-directory: ./tests
        run: |
          echo "## 🔥 Firebase Security Rules Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage/lcov-report/index.html ]; then
            echo "### 📊 Coverage Report Generated" >> $GITHUB_STEP_SUMMARY
            echo "Coverage reports have been generated and uploaded." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 📋 Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Firebase CLI Version:** $(firebase --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version:** $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Project ID:** fusion-fc-test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📁 Rules Files Tested" >> $GITHUB_STEP_SUMMARY
          echo "- Firestore Rules: \`firestore.rules\`" >> $GITHUB_STEP_SUMMARY
          echo "- Storage Rules: \`storage.rules\`" >> $GITHUB_STEP_SUMMARY

  rules-validation:
    name: 🔍 Validate Rules Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔥 Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
        
      - name: 📋 Check for rules changes
        id: rules-changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -E '\.(rules)$'; then
            echo "rules_changed=true" >> $GITHUB_OUTPUT
            echo "Security rules files have been modified in this PR"
          else
            echo "rules_changed=false" >> $GITHUB_OUTPUT
            echo "No security rules changes detected"
          fi
          
      - name: 🔒 Security rules impact assessment
        if: steps.rules-changes.outputs.rules_changed == 'true'
        run: |
          echo "## 🔒 Security Rules Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR modifies Firebase Security Rules. Please ensure:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All tests pass" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] New rules are properly tested" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Security implications have been reviewed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Backward compatibility is maintained" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Performance impact has been considered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📁 Modified Files:" >> $GITHUB_STEP_SUMMARY
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(rules)$' | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done

  performance-check:
    name: 📈 Rules Performance Check
    runs-on: ubuntu-latest
    needs: rules-tests
    if: success()
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔥 Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
        
      - name: 📋 Install test dependencies
        working-directory: ./tests
        run: npm ci
        
      - name: ⚡ Run performance benchmarks
        working-directory: ./tests
        run: |
          echo "Running performance benchmarks..."
          # Note: This would run a performance-focused test suite
          # For now, we'll just run the tests and measure timing
          time node run-all-tests.js --coverage > performance.log 2>&1 || true
          
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Performance benchmarks completed. Check the workflow logs for detailed timing information." >> $GITHUB_STEP_SUMMARY
          
      - name: 📊 Upload performance logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-logs
          path: tests/performance.log
          retention-days: 7
