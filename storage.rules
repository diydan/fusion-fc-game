rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Avatar upload and read rules
    match /avatars/{userId}/{file} {
      allow read, write: if isAvatarOwner(path) && validImage() && validSize(5 * 1024 * 1024);
    }
    
    // Game asset rules - public assets (no authentication required)
    match /game/assets/public/{all=**} {
      allow read: if true;  // public
    }
    
    // Game asset rules - private assets (authentication required)
    match /game/assets/{all=**} {
      allow read: if isSignedIn();
    }
    
    // Team content rules
    match /teams/{teamId}/{all=**} {
      allow read, write: if isTeamMember(teamId) &&
                         ( (validImage() && validSize(10*1024*1024)) ||
                           (request.resource.mimeType == 'application/json' && validSize(1*1024*1024)) );
    }
    
    // Global catch-all deny rule with default size limit
    match /{path=**} {
      allow read, write: if false && request.resource.size <= 20 * 1024 * 1024;
    }
  }
}

// Helper functions for avatar rules
function isAvatarOwner(path) {
  return request.auth != null && path[3] == request.auth.uid;
}

function validImage() {
  return request.resource.contentType.matches('image/.*');
}

function validSize(maxSize) {
  return request.resource.size < maxSize;
}

// Helper function for game asset rules
function isSignedIn() {
  return request.auth != null;
}

// Helper function for team membership verification
function isTeamMember(teamId) {
  // Check if user is authenticated and is either:
  // 1. The team manager, or
  // 2. A member in the team's member list
  return request.auth != null &&
         (isTeamManager(teamId) ||
          (firestore.exists(/databases/(default)/documents/teams/$(teamId)) &&
           request.auth.uid in firestore.get(/databases/(default)/documents/teams/$(teamId)).data.get('members', [])));
}

function isTeamManager(teamId) {
  return request.auth != null &&
         firestore.exists(/databases/(default)/documents/teams/$(teamId)) &&
         firestore.get(/databases/(default)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
}
